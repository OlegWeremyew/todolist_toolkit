{"version":3,"sources":["App/App.module.scss","components/PageNotFound/PageNotFound.module.scss","App/AppReducer/constants/index.ts","App/AppReducer/AppAction/AppAction.ts","features/enums/index.ts","App/AppReducer/AppReducer/AppReducer.ts","enums/index.ts","features/Login/constants/index.ts","api/apiConfig/index.ts","api/authAPI/authAPI.ts","features/Login/loginActions/loginActions.ts","features/TodolistLists/Todolist/Task/TaskReducer/constants/index.ts","features/Login/loginReducer/authReducer.ts","api/todolistAPI/todolistApi.ts","utils/errorUtils.ts","constants/index.ts","selectors/authSelectors/authSelectors.ts","features/Login/Login.tsx","features/Login/loginThunk/loginThunk.ts","features/TodolistLists/Todolist/Task/TaskReducer/TaskAction/TaskAction.ts","features/TodolistLists/constants/index.ts","features/TodolistLists/Todolist/Task/TaskReducer/TaskThunk/TaskThunk.ts","features/TodolistLists/Todolist/Task/TaskReducer/TaskReducer/tasksReducer.ts","components/EditableSpan/EditableSpan.tsx","features/TodolistLists/Todolist/Task/Task.tsx","components/AddItemForm/AddItemForm.tsx","features/TodolistLists/Todolist/Todolist.tsx","features/TodolistLists/TodolistReducer/todolistsReducer.ts","features/TodolistLists/TodolistAction/TodolistAction.ts","selectors/taskSelectors/taskSelectors.ts","selectors/todolistSelectors/todolistSelectors.ts","features/TodolistLists/TodolistList.tsx","features/TodolistLists/TodolistThunk/TodolistThunk.ts","selectors/appSelectors/appSelectors.ts","components/ButtonAppBar/ButtonAppBar.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","components/PageNotFound/PageNotFound.tsx","App/App.tsx","App/AppReducer/AppThunk/AppThunk.ts","App/store.ts","index.tsx","features/TodolistLists/TodolistList.module.scss","features/TodolistLists/Todolist/Task/Task.module.css","components/EditableSpan/EditableSpan.module.scss","features/TodolistLists/Todolist/TodolistList.module.css"],"names":["module","exports","appEnumReducer","LoadingStatuses","AppAction","error","type","SET_ERROR","payload","status","SET_STATUS","isInitialized","SET_INITIALIZED","TaskStatuses","TaskPriorities","ResultCodes","ErrorValues","PATH","authEnumReducer","initialAppState","Idle","instance","axios","create","withCredentials","baseURL","process","headers","authAPI","data","post","get","delete","taskEnumReducer","authAction","value","SET_IS_LOGGED_IN","initialAuthState","isLoggedIn","todolistAPI","title","todolistId","endPoint","put","taskId","model","handleServerAppError","dispatch","messages","length","Failed","handleServerNetworkError","err","message","getIsLoggedInSelector","state","auth","Login","useSelector","useDispatch","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","INVALID_ADDRESS","REQUIRED_EMAIL","PASSWORD_LENGTH","REQUIRED_PASSWORD","onSubmit","Loading","then","res","resultCode","Success","Succeeded","catch","resetForm","to","MAIN_WINDOW","Grid","container","justifyContent","item","FormControl","FormLabel","href","target","rel","handleSubmit","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","Button","variant","todolistEnumReducer","taskAction","REMOVE_TASK","task","ADD_TASK","UPDATE_TASK","tasks","SET_TASKS","updateTaskTC","domainModel","getState","find","t","id","apiModel","startDate","priority","description","deadline","initialTaskState","EditableSpan","React","memo","onChange","useState","editMode","setEditMode","setTitle","e","currentTarget","autoFocus","onBlur","onDoubleClick","className","text","Task","removeTask","changeTaskStatus","changeTaskTitle","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","containerTask","mainBlock","IconButton","onClick","size","Delete","fontSize","AddItemForm","addItem","disabled","setError","addItemHandler","trim","onKeyPress","key","AddBox","Todolist","addTaskCallBack","todolist","removeTodolistCallBack","changeTodolistTitleCallBack","changeFilterCallBack","props","useEffect","items","addTask","removeTodolist","changeTodolistTitle","tasksForTodolist","filter","todolist__title","entityStatus","map","paddingTop","initialTodoListState","ActionTodolist","REMOVE_TODOLIST","ADD_TODOLIST","CHANGE_TODOLIST_TITLE","CHANGE_TODOLIST_FILTER","todos","SET_TODOS","CHANGE_TODOLIST_ENTITY_STATUS","getTaskSelector","getTodoLists","todolists","TodolistList","todoLists","removeTaskTC","addTaskTC","changeStatus","newTitle","changeFilter","ChangeTodolistTitleTC","addTodolist","addTodolistTC","gridForm","spacing","gridTodolist","todo","Paper","paperStyle","LOGIN","getIsInitializedSelector","app","getStatus","getError","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","edge","mr","Typography","component","LinearProgress","Alert","ref","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","width","PageNotFound","pageNotFound","App","finally","Container","fixed","path","element","PAGE_NOT_FOUND","ERROR","preloader","CircularProgress","rootReducer","combineReducers","action","f","todoListId","m","copyState","stateCopy","forEach","tl","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3db5628.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"App_preloader__181Gc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFound\":\"PageNotFound_pageNotFound__OMvLJ\"};","export enum appEnumReducer {\n  SET_STATUS = 'TODOLIST/APP_REDUCER/SET-STATUS',\n  SET_ERROR = 'TODOLIST/APP_REDUCER/SET_ERROR',\n  SET_INITIALIZED = 'TODOLIST/APP_REDUCER/SET_INITIALIZED',\n}\n","import { Nullable } from '../../../types/Nullable';\nimport { appEnumReducer } from '../constants';\nimport { RequestStatusType } from '../types';\n\nexport const AppAction = {\n  setAppErrorAC(error: Nullable<string>) {\n    return {\n      type: appEnumReducer.SET_ERROR,\n      payload: {\n        error,\n      },\n    } as const;\n  },\n  setAppStatusAC(status: RequestStatusType) {\n    return {\n      type: appEnumReducer.SET_STATUS,\n      payload: {\n        status,\n      },\n    } as const;\n  },\n  setInitializedAC(isInitialized: boolean) {\n    return {\n      type: appEnumReducer.SET_INITIALIZED,\n      payload: {\n        isInitialized,\n      },\n    } as const;\n  },\n};\n","export enum LoadingStatuses {\n  Loading = 'loading',\n  Succeeded = 'succeeded',\n  Idle = 'idle',\n  Failed = 'failed',\n}\n","import { LoadingStatuses } from '../../../features/enums';\nimport { appEnumReducer } from '../constants';\nimport { ActionAppTypes, InitialAppStateType, RequestStatusType } from '../types';\n\nexport const initialAppState = {\n  status: LoadingStatuses.Idle as RequestStatusType,\n  error: null,\n  isInitialized: false,\n};\n\nexport const appReducer = (\n  state: InitialAppStateType = initialAppState,\n  action: ActionAppTypes,\n): InitialAppStateType => {\n  switch (action.type) {\n    case appEnumReducer.SET_STATUS:\n      return { ...state, status: action.payload.status };\n    case appEnumReducer.SET_ERROR:\n      return { ...state, error: action.payload.error };\n    case appEnumReducer.SET_INITIALIZED:\n      return { ...state, isInitialized: action.payload.isInitialized };\n    default:\n      return state;\n  }\n};\n","export enum TaskStatuses {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3,\n}\n\nexport enum TaskPriorities {\n  Low = 0,\n  Middle = 1,\n  Hi = 2,\n  Urgently = 3,\n  Later = 4,\n}\n\nexport enum ResultCodes {\n  Success = 0,\n}\n\nexport enum ErrorValues {\n  REQUIRED_PASSWORD = 'Password is required',\n  INVALID_ADDRESS = 'Invalid email address',\n  PASSWORD_LENGTH = 'Password should be more than 3 symbols',\n  SOME_ERROR = 'Some error occurred',\n  REQUIRED_EMAIL = 'Email is required',\n}\n\nexport enum PATH {\n  MAIN_WINDOW = '/',\n  LOGIN = 'login',\n  PAGE_NOT_FOUND = '404',\n  ERROR = '*',\n}\n","export enum authEnumReducer {\n  SET_IS_LOGGED_IN = 'TODOLIST/AUTH_REDUCER/SET_IS_LOGGED_IN',\n}\n","import axios from 'axios';\n\nexport const instance = axios.create({\n  withCredentials: true,\n  baseURL: process.env.REACT_APP_BASE_URL,\n  headers: {\n    'API-KEY': process.env.REACT_APP_API_KEY as APIKeyType,\n  },\n});\n\ntype APIKeyType = string | number | boolean;\n","import { AxiosResponse } from 'axios';\n\nimport { instance } from '../apiConfig';\nimport { LoginParamsType, ResponseMeType, ResponseType } from '../types';\n\nexport const authAPI = {\n  login(data: LoginParamsType) {\n    const endPoint = '/auth/login';\n    return instance.post<\n      LoginParamsType,\n      AxiosResponse<ResponseType<{ userId: number }>>\n    >(endPoint, data);\n  },\n  me() {\n    const endPoint = '/auth/me';\n    return instance.get<ResponseType<{ data: ResponseMeType }>>(endPoint);\n  },\n  logout() {\n    const endPoint = '/auth/login';\n    return instance.delete<ResponseType>(endPoint);\n  },\n};\n","import { authEnumReducer } from '../constants';\n\nexport const authAction = {\n  setIsLoggedInAC(value: boolean) {\n    return {\n      type: authEnumReducer.SET_IS_LOGGED_IN,\n      payload: { value },\n    } as const;\n  },\n};\n","export enum taskEnumReducer {\n  REMOVE_TASK = 'TODOLIST/TASK_REDUCER/REMOVE_TASK',\n  ADD_TASK = 'TODOLIST/TASK_REDUCER/ADD_TASK',\n  UPDATE_TASK = 'TODOLIST/TASK_REDUCER/UPDATE_TASK',\n  SET_TASKS = 'TODOLIST/TASK_REDUCER/SET-TASKS',\n}\n","import { authEnumReducer } from '../constants';\nimport { AuthReducerActionsType, InitialAuthStateType } from '../types';\n\nexport const initialAuthState = {\n  isLoggedIn: false,\n};\n\nexport const authReducer = (\n  state: InitialAuthStateType = initialAuthState,\n  action: AuthReducerActionsType,\n): InitialAuthStateType => {\n  switch (action.type) {\n    case authEnumReducer.SET_IS_LOGGED_IN:\n      return { ...state, isLoggedIn: action.payload.value };\n    default:\n      return state;\n  }\n};\n","import { AxiosResponse } from 'axios';\n\nimport { instance } from '../apiConfig';\nimport {\n  GetTasksResponse,\n  TaskType,\n  TodolistType,\n  UpdateTaskModelType,\n  ResponseType,\n} from '../types';\n\nexport const todolistAPI = {\n  // todolist =============================\n  getTodos(): Promise<AxiosResponse<TodolistType[]>> {\n    const endPoint = `todo-lists/`;\n    return instance.get<TodolistType[]>(endPoint);\n  },\n\n  createTodo(title: string) {\n    const endPoint = `todo-lists/`;\n    return instance.post<ResponseType<{ item: TodolistType }>>(endPoint, { title });\n  },\n\n  updateTodoTitle(todolistId: string, title: string) {\n    const endPoint = `todo-lists/${todolistId}`;\n    return instance.put<ResponseType>(endPoint, { title });\n  },\n\n  deleteTodo(todolistId: string) {\n    const endPoint = `todo-lists/${todolistId}`;\n    return instance.delete<ResponseType>(endPoint);\n  },\n\n  // tasks =============================\n  getTasks(todolistId: string) {\n    const endPoint = `todo-lists/${todolistId}/tasks/`;\n    return instance.get<GetTasksResponse>(endPoint);\n  },\n\n  deleteTask(todolistId: string, taskId: string) {\n    const endPoint = `todo-lists/${todolistId}/tasks/${taskId}`;\n    return instance.delete<ResponseType>(endPoint);\n  },\n\n  createTask(todolistId: string, title: string) {\n    const endPoint = `todo-lists/${todolistId}/tasks/`;\n    return instance.post<\n      { title: string },\n      AxiosResponse<ResponseType<{ item: TaskType }>>\n    >(endPoint, { title });\n  },\n\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n    const endPoint = `todo-lists/${todolistId}/tasks/${taskId}`;\n    return instance.put<\n      UpdateTaskModelType,\n      AxiosResponse<ResponseType<{ item: TaskType }>>\n    >(endPoint, model);\n  },\n};\n","import { Dispatch } from 'redux';\n\nimport { ResponseType } from '../api/types';\nimport { AppAction } from '../App/AppReducer/AppAction/AppAction';\nimport { ActionAppTypes } from '../App/AppReducer/types';\nimport { FIRST_ELEMENT_IN_ARRAY } from '../constants';\nimport { LoadingStatuses } from '../features/enums';\n\nexport const handleServerAppError = <D>(\n  data: ResponseType<D>,\n  dispatch: Dispatch<ActionAppTypes>,\n): void => {\n  if (data.messages.length) {\n    dispatch(AppAction.setAppErrorAC(data.messages[FIRST_ELEMENT_IN_ARRAY]));\n  } else {\n    dispatch(AppAction.setAppErrorAC('Some error'));\n  }\n  dispatch(AppAction.setAppStatusAC(LoadingStatuses.Failed));\n};\n\nexport const handleServerNetworkError = (\n  err: { message: string },\n  dispatch: Dispatch<ActionAppTypes>,\n): void => {\n  dispatch(AppAction.setAppErrorAC(err.message ? err.message : 'Some error'));\n  dispatch(AppAction.setAppStatusAC(LoadingStatuses.Failed));\n};\n","export const EMPTY_STRING = '';\nexport const ZERO_VALUE = 0;\nexport const FIRST_ELEMENT_IN_ARRAY = 0;\nexport const SECOND_ELEMENT_IN_ARRAY = 1;\nexport const MIN_PASSWORD_LENGTH = 3;\n","import { AppRootStateType } from '../../App/store';\n\nexport const getIsLoggedInSelector = (state: AppRootStateType): boolean =>\n  state.auth.isLoggedIn;\n","import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { LoginParamsType } from '../../api/types';\nimport { EMPTY_STRING, MIN_PASSWORD_LENGTH } from '../../constants';\nimport { ErrorValues, PATH } from '../../enums';\nimport { ReturnComponentType } from '../../types/ReturnComponentType';\n\nimport { loginTC } from './loginThunk';\n\nimport { getIsLoggedInSelector } from 'selectors/authSelectors/authSelectors';\n\nexport const Login: React.FC = (): ReturnComponentType => {\n  const isLoggedIn: boolean = useSelector(getIsLoggedInSelector);\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      email: EMPTY_STRING,\n      password: EMPTY_STRING,\n      rememberMe: false,\n    },\n    validate: values => {\n      const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {};\n      if (!values.email) {\n        errors.email = ErrorValues.REQUIRED_EMAIL;\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = ErrorValues.INVALID_ADDRESS;\n      }\n      if (!values.password) {\n        errors.password = ErrorValues.REQUIRED_PASSWORD;\n      } else if (values.password.length < MIN_PASSWORD_LENGTH) {\n        errors.password = ErrorValues.PASSWORD_LENGTH;\n      }\n      return errors;\n    },\n    onSubmit: values => {\n      dispatch(loginTC(values));\n      formik.resetForm();\n    },\n  });\n\n  if (isLoggedIn) {\n    return <Navigate to={PATH.MAIN_WINDOW} />;\n  }\n\n  return (\n    <Grid container justifyContent=\"center\">\n      <Grid item justifyContent=\"center\">\n        <FormControl>\n          <FormLabel>\n            <p>\n              <span>To log in get registered </span>\n              <a\n                href=\"https://social-network.samuraijs.com/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                here\n              </a>\n            </p>\n            <p>or use common test account credentials:</p>\n            <p>Email: free@samuraijs.com</p>\n            <p>Password: free</p>\n          </FormLabel>\n          <form onSubmit={formik.handleSubmit}>\n            <FormGroup>\n              <TextField\n                label=\"Email\"\n                margin=\"normal\"\n                {...formik.getFieldProps('email')}\n              />\n              {formik.touched.email && formik.errors.email && (\n                <div style={{ color: 'red' }}>{formik.errors.email}</div>\n              )}\n              <TextField\n                label=\"Password\"\n                type=\"password\"\n                margin=\"normal\"\n                {...formik.getFieldProps('password')}\n              />\n              {formik.touched.password && formik.errors.password && (\n                <div style={{ color: 'red' }}>{formik.errors.password}</div>\n              )}\n              <FormControlLabel\n                label=\"Remember me\"\n                control={<Checkbox {...formik.getFieldProps('rememberMe')} />}\n              />\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                Login\n              </Button>\n            </FormGroup>\n          </form>\n        </FormControl>\n      </Grid>\n    </Grid>\n  );\n};\n","import { Dispatch } from 'redux';\n\nimport { authAPI } from '../../../api';\nimport { LoginParamsType } from '../../../api/types';\nimport { AppAction } from '../../../App';\nimport { ResultCodes } from '../../../enums';\nimport { handleServerAppError, handleServerNetworkError } from '../../../utils';\nimport { LoadingStatuses } from '../../enums';\nimport { authAction } from '../loginActions';\nimport { AuthReducerActionsType } from '../types';\n\nexport const loginTC =\n  (data: LoginParamsType) => (dispatch: Dispatch<AuthReducerActionsType>) => {\n    dispatch(AppAction.setAppStatusAC(LoadingStatuses.Loading));\n    authAPI\n      .login(data)\n      .then(res => {\n        if (res.data.resultCode === ResultCodes.Success) {\n          dispatch(authAction.setIsLoggedInAC(true));\n          dispatch(AppAction.setAppStatusAC(LoadingStatuses.Succeeded));\n        } else {\n          handleServerAppError(res.data, dispatch);\n        }\n      })\n      .catch(err => {\n        handleServerNetworkError(err, dispatch);\n      });\n  };\n\nexport const logoutTC = () => (dispatch: Dispatch) => {\n  authAPI\n    .logout()\n    .then(res => {\n      if (res.data.resultCode === ResultCodes.Success) {\n        dispatch(authAction.setIsLoggedInAC(false));\n        dispatch(AppAction.setAppStatusAC(LoadingStatuses.Succeeded));\n      } else {\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch(err => {\n      handleServerNetworkError(err, dispatch);\n    });\n};\n","import { TaskType } from '../../../../../../api/types';\nimport { taskEnumReducer } from '../constants';\nimport { UpdateDomainTaskModelType } from '../types';\n\nexport const taskAction = {\n  removeTaskAC(taskId: string, todolistId: string) {\n    return {\n      type: taskEnumReducer.REMOVE_TASK,\n      payload: {\n        taskId,\n        todolistId,\n      },\n    } as const;\n  },\n  addTaskAC(task: TaskType) {\n    return {\n      type: taskEnumReducer.ADD_TASK,\n      payload: {\n        task,\n      },\n    } as const;\n  },\n  updateTaskAC(taskId: string, model: UpdateDomainTaskModelType, todolistId: string) {\n    return {\n      type: taskEnumReducer.UPDATE_TASK,\n      payload: {\n        model,\n        todolistId,\n        taskId,\n      },\n    } as const;\n  },\n  setTasksAC(tasks: Array<TaskType>, todolistId: string) {\n    return {\n      type: taskEnumReducer.SET_TASKS,\n      payload: {\n        tasks,\n        todolistId,\n      },\n    } as const;\n  },\n};\n","export enum todolistEnumReducer {\n  REMOVE_TODOLIST = 'TODOLIST/TODOLIST_REDUCER/REMOVE-TODOLIST',\n  ADD_TODOLIST = 'TODOLIST/TODOLIST_REDUCER/ADD_TODOLIST',\n  CHANGE_TODOLIST_TITLE = 'TODOLIST/TODOLIST_REDUCER/CHANGE-TODOLIST-TITLE',\n  CHANGE_TODOLIST_FILTER = 'TODOLIST/TODOLIST_REDUCER/CHANGE_TODOLIST_FILTER',\n  CHANGE_TODOLIST_ENTITY_STATUS = 'TODOLIST/TODOLIST_REDUCER/CHANGE_TODOLIST_ENTITY_STATUS',\n  SET_TODOS = 'TODOLIST/TODOLIST_REDUCER/SET_TODOS',\n}\n","import { todolistAPI } from '../../../../../../api/todolistAPI/todolistApi';\nimport { UpdateTaskModelType } from '../../../../../../api/types';\nimport { AppAction } from '../../../../../../App/AppReducer';\nimport { AppRootStateType } from '../../../../../../App/store';\nimport { ResultCodes } from '../../../../../../enums';\nimport { handleServerAppError, handleServerNetworkError } from '../../../../../../utils';\nimport { LoadingStatuses } from '../../../../../enums';\nimport { taskAction } from '../TaskAction';\nimport { ThunkDispatchType, UpdateDomainTaskModelType } from '../types';\n\nexport const fetchTasksTC = (todolistId: string) => (dispatch: ThunkDispatchType) => {\n  dispatch(AppAction.setAppStatusAC(LoadingStatuses.Loading));\n  todolistAPI.getTasks(todolistId).then(res => {\n    const tasks = res.data.items;\n    dispatch(taskAction.setTasksAC(tasks, todolistId));\n    dispatch(AppAction.setAppStatusAC(LoadingStatuses.Succeeded));\n  });\n};\n\nexport const removeTaskTC =\n  (taskId: string, todolistId: string) => (dispatch: ThunkDispatchType) => {\n    dispatch(AppAction.setAppStatusAC(LoadingStatuses.Loading));\n    todolistAPI.deleteTask(todolistId, taskId).then(() => {\n      dispatch(taskAction.removeTaskAC(taskId, todolistId));\n      dispatch(AppAction.setAppStatusAC(LoadingStatuses.Succeeded));\n    });\n  };\n\nexport const addTaskTC =\n  (todolistId: string, title: string) => (dispatch: ThunkDispatchType) => {\n    dispatch(AppAction.setAppStatusAC(LoadingStatuses.Loading));\n    todolistAPI\n      .createTask(todolistId, title)\n      .then(res => {\n        if (res.data.resultCode === ResultCodes.Success) {\n          const task = res.data.data.item;\n          dispatch(taskAction.addTaskAC(task));\n          dispatch(AppAction.setAppStatusAC(LoadingStatuses.Succeeded));\n        } else {\n          handleServerAppError(res.data, dispatch);\n        }\n      })\n      .catch(err => {\n        handleServerNetworkError(err, dispatch);\n      });\n  };\n\nexport const updateTaskTC =\n  (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) =>\n  (dispatch: ThunkDispatchType, getState: () => AppRootStateType) => {\n    const allTasksFromState = getState().tasks;\n    const tasksForCurrentTodolist = allTasksFromState[todolistId];\n    const task = tasksForCurrentTodolist.find(t => t.id === taskId);\n\n    if (task) {\n      const apiModel: UpdateTaskModelType = {\n        title: task.title,\n        startDate: task.startDate,\n        priority: task.priority,\n        description: task.description,\n        deadline: task.deadline,\n        status: task.status,\n        ...domainModel,\n      };\n      todolistAPI\n        .updateTask(todolistId, taskId, apiModel)\n        .then(res => {\n          if (res.data.resultCode === ResultCodes.Success) {\n            dispatch(taskAction.updateTaskAC(taskId, domainModel, todolistId));\n          } else {\n            handleServerAppError(res.data, dispatch);\n          }\n        })\n        .catch(err => {\n          handleServerNetworkError(err, dispatch);\n        });\n    }\n  };\n","import { TodolistType } from '../../../../../../api/types';\nimport { todolistEnumReducer } from '../../../../constants';\nimport { TasksStateType } from '../../../../TodolistList';\nimport { taskEnumReducer } from '../constants';\nimport { ActionsTaskAllType } from '../types';\n\nconst initialTaskState: TasksStateType = {};\n\nexport const tasksReducer = (\n  state: TasksStateType = initialTaskState,\n  action: ActionsTaskAllType,\n): TasksStateType => {\n  switch (action.type) {\n    case taskEnumReducer.REMOVE_TASK: {\n      return {\n        ...state,\n        [action.payload.todolistId]: state[action.payload.todolistId].filter(\n          f => f.id !== action.payload.taskId,\n        ),\n      };\n    }\n    case taskEnumReducer.ADD_TASK: {\n      return {\n        ...state,\n        [action.payload.task.todoListId]: [\n          action.payload.task,\n          ...state[action.payload.task.todoListId],\n        ],\n      };\n    }\n    case taskEnumReducer.UPDATE_TASK: {\n      return {\n        ...state,\n        [action.payload.todolistId]: state[action.payload.todolistId].map(m =>\n          m.id === action.payload.taskId ? { ...m, ...action.payload.model } : m,\n        ),\n      };\n    }\n    case todolistEnumReducer.ADD_TODOLIST: {\n      return {\n        ...state,\n        [action.payload.todolist.id]: [],\n      };\n    }\n    case todolistEnumReducer.REMOVE_TODOLIST: {\n      const copyState = { ...state };\n      delete copyState[action.payload.id];\n      return copyState;\n    }\n    case todolistEnumReducer.SET_TODOS: {\n      const stateCopy = { ...state };\n      action.payload.todos.forEach((todolist: TodolistType) => {\n        stateCopy[todolist.id] = [];\n      });\n      return stateCopy;\n    }\n    case taskEnumReducer.SET_TASKS: {\n      return { ...state, [action.payload.todolistId]: action.payload.tasks };\n    }\n    default:\n      return state;\n  }\n};\n","import React, { ChangeEvent, useState } from 'react';\n\nimport { TextField } from '@material-ui/core';\n\nimport style from './EditableSpan.module.scss';\n\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo(\n  ({ value, onChange }) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [title, setTitle] = useState<string>(value);\n\n    const activateEditMode = (): void => {\n      setEditMode(true);\n      setTitle(value);\n    };\n    const activateViewMode = (): void => {\n      setEditMode(false);\n      onChange(title);\n    };\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>): void => {\n      setTitle(e.currentTarget.value);\n    };\n\n    return editMode ? (\n      <TextField\n        variant=\"standard\"\n        value={title}\n        onChange={changeTitle}\n        autoFocus\n        onBlur={activateViewMode}\n      />\n    ) : (\n      <span onDoubleClick={activateEditMode} className={style.text}>\n        {value}\n      </span>\n    );\n  },\n);\n\n// type\n\ntype EditableSpanPropsType = {\n  value: string;\n  onChange: (newValue: string) => void;\n};\n","import React, { ChangeEvent, useCallback } from 'react';\n\nimport { Checkbox, IconButton } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\n\nimport { TaskType } from '../../../../api/types';\nimport { TaskStatuses } from '../../../../enums';\n\nimport style from './Task.module.css';\n\nimport { EditableSpan } from 'components/EditableSpan/EditableSpan';\n\nexport const Task: React.FC<TaskPropsType> = React.memo(\n  ({ task, removeTask, todolistId, changeTaskStatus, changeTaskTitle }) => {\n    const onClickHandler = useCallback(() => {\n      removeTask(task.id, todolistId);\n    }, [task.id, todolistId, removeTask]);\n\n    const onChangeHandler = useCallback(\n      (e: ChangeEvent<HTMLInputElement>) => {\n        const newIsDoneValue = e.currentTarget.checked;\n        changeTaskStatus(\n          task.id,\n          newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\n          todolistId,\n        );\n      },\n      [task.id, todolistId, changeTaskStatus],\n    );\n\n    const onTitleChangeHandler = useCallback(\n      (newValue: string) => {\n        changeTaskTitle(task.id, newValue, todolistId);\n      },\n      [task.id, todolistId, changeTaskTitle],\n    );\n\n    return (\n      <div\n        key={task.id}\n        className={task.status === TaskStatuses.Completed ? 'is-done' : ''}\n      >\n        <div className={style.containerTask}>\n          <div className={style.mainBlock}>\n            <Checkbox\n              checked={task.status === TaskStatuses.Completed}\n              color=\"primary\"\n              onChange={onChangeHandler}\n            />\n            <EditableSpan value={task.title} onChange={onTitleChangeHandler} />\n          </div>\n          <IconButton onClick={onClickHandler} size=\"small\">\n            <Delete fontSize=\"inherit\" />\n          </IconButton>\n        </div>\n      </div>\n    );\n  },\n);\n\n// type\nexport type TaskPropsType = {\n  todolistId: string;\n  task: TaskType;\n  removeTask: (taskID: string, todolistID: string) => void;\n  changeTaskStatus: (taskID: string, status: TaskStatuses, todolistId: string) => void;\n  changeTaskTitle: (taskID: string, newValue: string, todolistID: string) => void;\n};\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\n\nimport { IconButton, TextField } from '@material-ui/core';\nimport { AddBox } from '@material-ui/icons';\n\nimport { EMPTY_STRING } from '../../constants';\n\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo(\n  ({ addItem, label, disabled = false }) => {\n    const [title, setTitle] = useState<string>(EMPTY_STRING);\n    const [error, setError] = useState<boolean>(false);\n\n    const addItemHandler = (): void => {\n      if (title.trim() !== EMPTY_STRING) {\n        addItem(title);\n        setTitle(EMPTY_STRING);\n      } else {\n        setError(true);\n      }\n    };\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>): void => {\n      setTitle(e.currentTarget.value);\n    };\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>): void => {\n      setError(false);\n      if (e.key === 'Enter') {\n        addItemHandler();\n      }\n    };\n\n    return (\n      <div>\n        <TextField\n          disabled={disabled}\n          variant=\"standard\"\n          error={error}\n          size=\"small\"\n          value={title}\n          onChange={onChangeHandler}\n          onKeyPress={onKeyPressHandler}\n          label={error ? 'Title is required' : label}\n        />\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\n          <AddBox />\n        </IconButton>\n      </div>\n    );\n  },\n);\n\n// type\n\ntype AddItemFormPropsType = {\n  addItem: (title: string) => void;\n  label: string;\n  disabled?: boolean;\n};\n","import React, { useCallback, useEffect } from 'react';\n\nimport { Button, IconButton } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport { useDispatch } from 'react-redux';\n\nimport { TaskType } from '../../../api/types';\nimport { TaskStatuses } from '../../../enums';\nimport { LoadingStatuses } from '../../enums';\nimport { FilterValuesType, TodolistDomainType } from '../types';\n\nimport { fetchTasksTC, Task } from './Task';\nimport style from './TodolistList.module.css';\n\nimport { AddItemForm } from 'components/AddItemForm/AddItemForm';\nimport { EditableSpan } from 'components/EditableSpan/EditableSpan';\n\nexport const Todolist: React.FC<PropsType> = React.memo(\n  ({\n    changeTaskStatus,\n    addTaskCallBack,\n    todolist,\n    removeTodolistCallBack,\n    changeTodolistTitleCallBack,\n    changeTaskTitle,\n    removeTask,\n    changeFilterCallBack,\n    ...props\n  }) => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n      dispatch(fetchTasksTC(todolist.id));\n    }, [dispatch, todolist.id]);\n\n    const addTask = useCallback(\n      (title: string) => {\n        addTaskCallBack(title, todolist.id);\n      },\n      [addTaskCallBack, todolist.id],\n    );\n\n    const removeTodolist = useCallback(() => {\n      removeTodolistCallBack(todolist.id);\n    }, [removeTodolistCallBack, todolist.id]);\n\n    const changeTodolistTitle = useCallback(\n      (title: string) => {\n        changeTodolistTitleCallBack(todolist.id, title);\n      },\n      [changeTodolistTitleCallBack, todolist.id],\n    );\n\n    const onClickHandler = useCallback(\n      (value: FilterValuesType) => {\n        changeFilterCallBack(value, todolist.id);\n      },\n      [changeFilterCallBack, todolist.id],\n    );\n\n    let tasksForTodolist = props.tasks;\n\n    if (todolist.filter === 'active') {\n      tasksForTodolist = tasksForTodolist.filter(\n        task => task.status === TaskStatuses.New,\n      );\n    }\n\n    if (todolist.filter === 'completed') {\n      tasksForTodolist = tasksForTodolist.filter(\n        task => task.status === TaskStatuses.Completed,\n      );\n    }\n\n    return (\n      <div>\n        <div className={style.todolist__title}>\n          <EditableSpan value={todolist.title} onChange={changeTodolistTitle} />\n          <IconButton\n            onClick={removeTodolist}\n            disabled={todolist.entityStatus === LoadingStatuses.Loading}\n          >\n            <Delete />\n          </IconButton>\n        </div>\n        <AddItemForm\n          label=\"Name task\"\n          addItem={addTask}\n          disabled={todolist.entityStatus === LoadingStatuses.Loading}\n        />\n        <div>\n          {tasksForTodolist.map(task => (\n            <Task\n              key={task.id}\n              todolistId={todolist.id}\n              task={task}\n              removeTask={removeTask}\n              changeTaskStatus={changeTaskStatus}\n              changeTaskTitle={changeTaskTitle}\n            />\n          ))}\n        </div>\n        <div style={{ paddingTop: '10px' }}>\n          <Button\n            variant={todolist.filter === 'all' ? 'outlined' : 'text'}\n            onClick={() => onClickHandler('all')}\n            color=\"success\"\n          >\n            All\n          </Button>\n          <Button\n            variant={todolist.filter === 'active' ? 'outlined' : 'text'}\n            onClick={() => onClickHandler('active')}\n            color=\"primary\"\n          >\n            Active\n          </Button>\n          <Button\n            variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\n            onClick={() => onClickHandler('completed')}\n            color=\"secondary\"\n          >\n            Completed\n          </Button>\n        </div>\n      </div>\n    );\n  },\n);\n\n// type\n\ntype PropsType = {\n  todolist: TodolistDomainType;\n  tasks: Array<TaskType>;\n  removeTask: (taskId: string, todolistId: string) => void;\n  changeFilterCallBack: (value: FilterValuesType, todolistId: string) => void;\n  addTaskCallBack: (title: string, todolistId: string) => void;\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void;\n  removeTodolistCallBack: (id: string) => void;\n  changeTodolistTitleCallBack: (id: string, newTitle: string) => void;\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void;\n};\n","import { LoadingStatuses } from '../../enums';\nimport { todolistEnumReducer } from '../constants';\nimport { ActionTodolistTypes, TodolistDomainType } from '../types';\n\nconst initialTodoListState: Array<TodolistDomainType> = [];\n\nexport const todolistsReducer = (\n  state: Array<TodolistDomainType> = initialTodoListState,\n  action: ActionTodolistTypes,\n): Array<TodolistDomainType> => {\n  switch (action.type) {\n    case todolistEnumReducer.REMOVE_TODOLIST: {\n      return state.filter(tl => tl.id !== action.payload.id);\n    }\n    case todolistEnumReducer.ADD_TODOLIST: {\n      return [\n        { ...action.payload.todolist, filter: 'all', entityStatus: LoadingStatuses.Idle },\n        ...state,\n      ];\n    }\n    case todolistEnumReducer.CHANGE_TODOLIST_TITLE: {\n      return state.map(m =>\n        m.id === action.payload.id ? { ...m, title: action.payload.title } : m,\n      );\n    }\n    case todolistEnumReducer.CHANGE_TODOLIST_FILTER: {\n      return state.map(m =>\n        m.id === action.payload.id ? { ...m, filter: action.payload.filter } : m,\n      );\n    }\n    case todolistEnumReducer.CHANGE_TODOLIST_ENTITY_STATUS: {\n      return state.map(m =>\n        m.id === action.payload.id ? { ...m, entityStatus: action.payload.status } : m,\n      );\n    }\n    case todolistEnumReducer.SET_TODOS: {\n      return action.payload.todos.map(m => ({\n        ...m,\n        filter: 'all',\n        entityStatus: LoadingStatuses.Idle,\n      }));\n    }\n    default:\n      return state;\n  }\n};\n","import { TodolistType } from '../../../api/types';\nimport { RequestStatusType } from '../../../App/AppReducer/types';\nimport { todolistEnumReducer } from '../constants';\nimport { FilterValuesType } from '../types';\n\nexport const ActionTodolist = {\n  removeTodolistAC(todolistId: string) {\n    return {\n      type: todolistEnumReducer.REMOVE_TODOLIST,\n      payload: {\n        id: todolistId,\n      },\n    } as const;\n  },\n  addTodolistAC(todolist: TodolistType) {\n    return {\n      type: todolistEnumReducer.ADD_TODOLIST,\n      payload: {\n        todolist,\n      },\n    } as const;\n  },\n  changeTodolistTitleAC(id: string, title: string) {\n    return {\n      type: todolistEnumReducer.CHANGE_TODOLIST_TITLE,\n      payload: {\n        id,\n        title,\n      },\n    } as const;\n  },\n  changeTodolistFilterAC(id: string, filter: FilterValuesType) {\n    return {\n      type: todolistEnumReducer.CHANGE_TODOLIST_FILTER,\n      payload: {\n        id,\n        filter,\n      },\n    } as const;\n  },\n  setTodosAC(todos: Array<TodolistType>) {\n    return {\n      type: todolistEnumReducer.SET_TODOS,\n      payload: {\n        todos,\n      },\n    } as const;\n  },\n  changeTodolistEntityStatusAC(id: string, status: RequestStatusType) {\n    return {\n      type: todolistEnumReducer.CHANGE_TODOLIST_ENTITY_STATUS,\n      payload: {\n        id,\n        status,\n      },\n    } as const;\n  },\n};\n","import { AppRootStateType } from '../../App/store';\nimport { TasksStateType } from '../../features/TodolistLists/TodolistList';\n\nexport const getTaskSelector = (state: AppRootStateType): TasksStateType => state.tasks;\n","import { AppRootStateType } from '../../App/store';\nimport { TodolistDomainType } from '../../features/TodolistLists/types';\n\nexport const getTodoLists = (state: AppRootStateType): Array<TodolistDomainType> =>\n  state.todolists;\n","import React, { useCallback, useEffect } from 'react';\n\nimport { Grid, Paper } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { TaskType } from '../../api/types';\nimport { PATH, TaskStatuses } from '../../enums';\nimport { ReturnComponentType } from '../../types/ReturnComponentType';\n\nimport { addTaskTC, removeTaskTC, Todolist, updateTaskTC } from './Todolist';\nimport { ActionTodolist } from './TodolistAction';\nimport style from './TodolistList.module.scss';\nimport {\n  addTodolistTC,\n  ChangeTodolistTitleTC,\n  fetchTodolistsTC,\n  removeTodolistTC,\n} from './TodolistThunk';\nimport { FilterValuesType, TodolistDomainType } from './types';\n\nimport { AddItemForm } from 'components/AddItemForm/AddItemForm';\nimport { getIsLoggedInSelector } from 'selectors/authSelectors/authSelectors';\nimport { getTaskSelector } from 'selectors/taskSelectors/taskSelectors';\nimport { getTodoLists } from 'selectors/todolistSelectors/todolistSelectors';\n\nexport const TodolistList = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n\n  const todoLists: TodolistDomainType[] = useSelector(getTodoLists);\n  const tasks: TasksStateType = useSelector(getTaskSelector);\n  const isLoggedIn: boolean = useSelector(getIsLoggedInSelector);\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      return;\n    }\n    dispatch(fetchTodolistsTC());\n  }, [isLoggedIn, dispatch]);\n\n  const removeTask = useCallback(\n    (id: string, todolistId: string) => {\n      dispatch(removeTaskTC(id, todolistId));\n    },\n    [dispatch],\n  );\n\n  const addTask = useCallback(\n    (title: string, todolistId: string) => {\n      dispatch(addTaskTC(todolistId, title));\n    },\n    [dispatch],\n  );\n\n  const changeStatus = useCallback(\n    (id: string, status: TaskStatuses, todolistId: string) => {\n      dispatch(updateTaskTC(id, todolistId, { status }));\n    },\n    [dispatch],\n  );\n\n  const changeTaskTitle = useCallback(\n    (id: string, newTitle: string, todolistId: string) => {\n      dispatch(updateTaskTC(id, todolistId, { title: newTitle }));\n    },\n    [dispatch],\n  );\n\n  const changeFilter = useCallback(\n    (value: FilterValuesType, todolistId: string) => {\n      dispatch(ActionTodolist.changeTodolistFilterAC(todolistId, value));\n    },\n    [dispatch],\n  );\n\n  const removeTodolist = useCallback(\n    (id: string) => {\n      dispatch(removeTodolistTC(id));\n    },\n    [dispatch],\n  );\n\n  const changeTodolistTitle = useCallback(\n    (id: string, title: string) => {\n      dispatch(ChangeTodolistTitleTC(id, title));\n    },\n    [dispatch],\n  );\n\n  const addTodolist = useCallback(\n    (title: string) => {\n      dispatch(addTodolistTC(title));\n    },\n    [dispatch],\n  );\n\n  if (!isLoggedIn) {\n    return <Navigate to={PATH.LOGIN} />;\n  }\n\n  return (\n    <>\n      <Grid container className={style.gridForm}>\n        <AddItemForm label=\"Name todolist\" addItem={addTodolist} />\n      </Grid>\n      <Grid container spacing={3} className={style.gridTodolist}>\n        {todoLists.map(todo => (\n          <Grid item key={todo.id}>\n            <Paper className={style.paperStyle}>\n              <Todolist\n                todolist={todo}\n                tasks={tasks[todo.id]}\n                removeTask={removeTask}\n                changeFilterCallBack={changeFilter}\n                addTaskCallBack={addTask}\n                changeTaskStatus={changeStatus}\n                removeTodolistCallBack={removeTodolist}\n                changeTaskTitle={changeTaskTitle}\n                changeTodolistTitleCallBack={changeTodolistTitle}\n              />\n            </Paper>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n};\n\n// Types\n\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>;\n};\n","import { todolistAPI } from '../../../api';\nimport { AppAction } from '../../../App';\nimport { LoadingStatuses } from '../../enums';\nimport { ActionTodolist } from '../TodolistAction';\nimport { ThunkDispatchType } from '../types';\n\nexport const fetchTodolistsTC = () => (dispatch: ThunkDispatchType) => {\n  dispatch(AppAction.setAppStatusAC(LoadingStatuses.Loading));\n  todolistAPI.getTodos().then(res => {\n    dispatch(ActionTodolist.setTodosAC(res.data));\n    dispatch(AppAction.setAppStatusAC(LoadingStatuses.Succeeded));\n  });\n};\n\nexport const removeTodolistTC = (todolistId: string) => (dispatch: ThunkDispatchType) => {\n  dispatch(AppAction.setAppStatusAC(LoadingStatuses.Loading));\n  dispatch(\n    ActionTodolist.changeTodolistEntityStatusAC(todolistId, LoadingStatuses.Loading),\n  );\n  todolistAPI.deleteTodo(todolistId).then(() => {\n    dispatch(ActionTodolist.removeTodolistAC(todolistId));\n    dispatch(AppAction.setAppStatusAC(LoadingStatuses.Succeeded));\n  });\n};\n\nexport const addTodolistTC = (title: string) => (dispatch: ThunkDispatchType) => {\n  dispatch(AppAction.setAppStatusAC(LoadingStatuses.Loading));\n  todolistAPI.createTodo(title).then(res => {\n    dispatch(ActionTodolist.addTodolistAC(res.data.data.item));\n    dispatch(AppAction.setAppStatusAC(LoadingStatuses.Succeeded));\n  });\n};\n\nexport const ChangeTodolistTitleTC =\n  (id: string, title: string) => (dispatch: ThunkDispatchType) => {\n    dispatch(AppAction.setAppStatusAC(LoadingStatuses.Loading));\n    todolistAPI.updateTodoTitle(id, title).then(() => {\n      dispatch(ActionTodolist.changeTodolistTitleAC(id, title));\n      dispatch(AppAction.setAppStatusAC(LoadingStatuses.Succeeded));\n    });\n  };\n","import { RequestStatusType } from '../../App/AppReducer/types';\nimport { AppRootStateType } from '../../App/store';\nimport { Nullable } from '../../types/Nullable';\n\nexport const getIsInitializedSelector = (state: AppRootStateType): boolean =>\n  state.app.isInitialized;\n\nexport const getStatus = (state: AppRootStateType): RequestStatusType => state.app.status;\n\nexport const getError = (state: AppRootStateType): Nullable<string> => state.app.error;\n","import * as React from 'react';\n\nimport {\n  AppBar,\n  Box,\n  Button,\n  IconButton,\n  LinearProgress,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { RequestStatusType } from '../../App/AppReducer/types';\nimport { ReturnComponentType } from '../../types/ReturnComponentType';\n\nimport { logoutTC } from 'features/Login';\nimport { getStatus } from 'selectors/appSelectors/appSelectors';\nimport { getIsLoggedInSelector } from 'selectors/authSelectors/authSelectors';\n\nexport const ButtonAppBar = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n\n  const status: RequestStatusType = useSelector(getStatus);\n  const isLoggedIn: boolean = useSelector(getIsLoggedInSelector);\n\n  const logoutHandler = (): void => {\n    dispatch(logoutTC());\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n          />\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            Todolist\n          </Typography>\n          {isLoggedIn && (\n            <Button variant=\"outlined\" onClick={logoutHandler} color=\"inherit\">\n              Logout\n            </Button>\n          )}\n        </Toolbar>\n        {status === 'loading' && <LinearProgress />}\n      </AppBar>\n    </Box>\n  );\n};\n","import * as React from 'react';\n\nimport { AlertProps, Snackbar } from '@material-ui/core';\nimport MuiAlert from '@material-ui/core/Alert';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { AppAction } from '../../App';\nimport { Nullable } from '../../types/Nullable';\nimport { ReturnComponentType } from '../../types/ReturnComponentType';\n\nimport { getError } from 'selectors/appSelectors/appSelectors';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>((props, ref) => (\n  <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />\n));\n\nexport const ErrorSnackbar = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n\n  const error: Nullable<string> = useSelector(getError);\n\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string): void => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    dispatch(AppAction.setAppErrorAC(null));\n  };\n\n  const isOpen = error !== null;\n\n  return (\n    <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\n        {error}\n      </Alert>\n    </Snackbar>\n  );\n};\n","import React from 'react';\n\nimport { ReturnComponentType } from '../../types/ReturnComponentType';\n\nimport style from './PageNotFound.module.scss';\n\nexport const PageNotFound = (): ReturnComponentType => (\n  <h1 className={style.pageNotFound}>404. Page not found</h1>\n);\n","import React, { useEffect } from 'react';\n\nimport { CircularProgress, Container } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate, Route, Routes } from 'react-router-dom';\n\nimport { PATH } from '../enums';\nimport { Login, TodolistList } from '../features';\nimport { ReturnComponentType } from '../types/ReturnComponentType';\n\nimport style from './App.module.scss';\nimport { initializeAppTC } from './AppReducer';\n\nimport { ButtonAppBar } from 'components/ButtonAppBar/ButtonAppBar';\nimport { ErrorSnackbar } from 'components/ErrorSnackbar/ErrorSnackbar';\nimport { PageNotFound } from 'components/PageNotFound/PageNotFound';\nimport { getIsInitializedSelector } from 'selectors/appSelectors/appSelectors';\n\nexport const App: React.FC = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n\n  const isInitialized: boolean = useSelector(getIsInitializedSelector);\n\n  useEffect(() => {\n    dispatch(initializeAppTC());\n  }, [dispatch, isInitialized]);\n\n  if (!isInitialized) {\n    return (\n      <div className={style.preloader}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <ErrorSnackbar />\n      <ButtonAppBar />\n      <Container fixed>\n        <Routes>\n          <Route path={PATH.MAIN_WINDOW} element={<TodolistList />} />\n          <Route path={PATH.LOGIN} element={<Login />} />\n          <Route path={PATH.PAGE_NOT_FOUND} element={<PageNotFound />} />\n          <Route path={PATH.ERROR} element={<Navigate to={PATH.PAGE_NOT_FOUND} />} />\n        </Routes>\n      </Container>\n    </div>\n  );\n};\n","import { Dispatch } from 'redux';\n\nimport { authAPI } from '../../../api/authAPI/authAPI';\nimport { ResultCodes } from '../../../enums';\nimport { authAction } from '../../../features';\nimport { AppAction } from '../AppAction';\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n  authAPI\n    .me()\n    .then(res => {\n      if (res.data.resultCode === ResultCodes.Success) {\n        dispatch(authAction.setIsLoggedInAC(true));\n      }\n    })\n    .finally(() => {\n      dispatch(AppAction.setInitializedAC(true));\n    });\n};\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { authReducer } from '../features';\nimport { tasksReducer, todolistsReducer } from '../features/TodolistLists';\n\nimport { appReducer } from './AppReducer';\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\nconst rootReducer = combineReducers({\n  tasks: tasksReducer,\n  todolists: todolistsReducer,\n  app: appReducer,\n  auth: authReducer,\n});\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport type PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never;\n\nexport type InferActionTypes<T extends { [key: string]: (...args: any[]) => any }> =\n  ReturnType<PropertiesTypes<T>>;\n\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\n\nimport './index.scss';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App, store } from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridForm\":\"TodolistList_gridForm__39fVs\",\"gridTodolist\":\"TodolistList_gridTodolist__2vFp3\",\"paperStyle\":\"TodolistList_paperStyle__IvGUR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerTask\":\"Task_containerTask__1g-kS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"EditableSpan_text__150Yx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist__title\":\"TodolistList_todolist__title__1CudV\"};"],"sourceRoot":""}